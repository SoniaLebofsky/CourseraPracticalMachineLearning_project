2*pt(abs(ts))
2*pt(abs(ts), df = 16)
2*pt(abs(ts), df = 16, lower.tail = FALSE)
ppois(10/1787, 1/100)
ppois(10/1787, 1/100 * 1787)
ppois(10, 1/100 * 1787)
pnorm(qnorm(0.95)/0.04/sqrt(100), mean = 0.01, sd = 0.04/sqrt(100), lower.tail = FALSE)
qnorm(0.95)
qnorm(0.95)/0.04/sqrt(100)
pnorm(qnorm(0.95)*(0.04/sqrt(100)), mean = 0.01, sd = 0.04/sqrt(100), lower.tail = FALSE)
pbinom(3, prob = 0.5, size = 4, lower.tail = FALSE)
pbinom(2, prob = 0.5, size = 4, lower.tail = FALSE)
0.04*(qnorm(0.95) - qnorm(0.1))/0.01
(0.04*(qnorm(0.95) - qnorm(0.1))/0.01)^2
1100 + c(-1,1)*qt(0.975, df = 8)*30/sqrt(9)
data("Seatbelts")
seatbelts <- as.data.frame(Seatbelts)
head(seatbelts)
str(seatbelts)
head(seatbelts)
head(seatbelts)
library(dplyr)
head(seat)
head(seatbelts)
seatbelts <- seatbelts %>% mutate(lotsKilled = (DriversKilled > 119))
head(seatbelts)
?as.numeric
seatbelts$lotsKilled <- as.numeric(seatbelts$lotsKilled)
head(se)
head(seatbelts)
tail(seatbelts)
head(seatbelts)
?glm
fit <- glm(lotsKilled ~ kms + PetrolPrice + law, data = seatbelts, family = "binomial")
summary(fit)
exp(summary(fit)$coef)
exp(round(summary(fit)$coef, 4)
)
exp(round(summary(fit)$coef, 3))
round(exp(summary(fit)$coef), 4)
head(seatbelts)
remove(list=ls())
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = binomial, data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds)/(1 + exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
rm(list=ls())
library(swirl)
swirl()
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[, 'date'])
as.integer(head(hits[, 'date']))
mdl <- glm(visits ~ date, family = poisson, data = hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, family = poisson, data = hits, offset = log(visits + 1))
mdl2 <- glm(simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
data(spacesuttle)
data(suttle)
data(shuttle)
head(shuttle)
str(shuttle)
fit <- glm(use ~ wind, data = shuttle, family = binomial)
summary(fit)$coef
exp(-0.03181183)
1/0.9686888
1 - exp(-0.03181183)
summary(fit)$coef
summary(fit)$coef[2,1]
exp(-1*summary(fit)$coef[2,1])
library(MASS)
data("shuttle")
str(shuttle)
fit <- glm(auto ~ wind, family = binomial, data = shuttle)
fit <- glm(use ~ wind, family = binomial, data = shuttle)
summary(fit)
summary(fit)$coef
beta1 <- summary(fit)$coef[2,1]
beta1
exp(-beta1)
exp(-beta1)
exp(beta1)
summary(fit)$coef
Ohead <- exp(summary(fit)$coef[1,1])
Omulttail <- exp(summary(fit)$coef[2,1])
Otail <- Ohead*Omulttail
Ohead
Otail
Ohead/Otail
Omulttail
fit2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
summary(fit2)$coef
exp(summary(fit2)$coef[2,1])
head(shuttle)
library(dplyr)
shuttle <- shuttle %>% mutate(isAuto = as.numeric(use))
head(shuttle)
tail(shuttle)
str(shuttle)
tail(shuttle)
shuttle <- shuttle %>% mutate(isAuto = as.numeric(use)-1)
head(shuttle)
levels(shuttle$auto)
shuttle(auto)
levels(shuttle$use)
View(shuttle)
remvoe(list=ls())
remove(list=ls())
data(shuttle)
str(shuttle)
head(shuttle)
?relevl
?relevel
relevel(shuttle$use, "noauto")
head(shuttle)
str(shuttle)
shuttle <- relevel(use, "noauto")
shuttle <- relevel(shuttle$use, "noauto")
head(shuttle)
remove(list=ls())
data(shuttle)
str(shuttle)
head(shuttle)
shuttle$use <- relevel(shuttle$use, "noauto")
str(shuttle)
head(shuttle)
fit <- glm(use ~ wind, data = shuttle, family = binomial)
summary(fit)$coef
beta1 <- summary(fit)$coef[2,1]
beta1
exp(-beta1)
fit2 <- glm(use ~ wind + magn, data = shuttle, family = binomial)
summary(fit2)$coef
exp(-1*summary(fit2)$coef[2,1])
remove(list=ls())
data("InsectSprays")
str(InsectSprays)
fit <- glm(count ~ spray, data = InsectSprays, family = poisson)
summary(fit)$coef
exp(-1*summary(fit)$coef[2,1])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y, x)
plot(x,y)
knot <- 0
splineTerms <- sapply(knot, function(knot)(x>knot)*(x-knot))
xMat <- cbind(1, x, splineTerms)
xMat
lm(y~xMat-1)
25*log(25)
25^2
1000*log(1000)
1000^2
?log
log(25,10)
log(25,2)
shiny::runApp('Desktop/Pre_Data_Science_Study/DataScience_and_ML/coursera_data_products/shiny_tutorial/stockVis')
shiny::runApp('Desktop/Pre_Data_Science_Study/DataScience_and_ML/coursera_data_products/shiny_tutorial/stockVis')
shiny::runApp('Desktop/Pre_Data_Science_Study/DataScience_and_ML/coursera_data_products/shiny_tutorial/stockVis')
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
str(predictors)
dim(diagnosis)
diagnosis
adData <- data.frame(diagnosis, predictors)
str(adData)
?createDataPartition
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex
training = adData[trainIndex,]
training
testing = adData[-trainIndex,]
dim(training)
dim(testing)
remvove(list=ls())
remove(list=ls())
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
str(mixtures)
inTrain
training = mixtures[ inTrain,]
dim(trainnig)
dim(trainig)
dim(training)
testing = mixtures[-inTrain,]
dim(testing)
head(mixtures)
hist(mixtures$Superplasticizer)
summary(mixtures)
log(0)
log(mixtures$Superplasticizer)
remove(list=ls())
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
?grep
grepl("^IL", names(training))
totrain <- training[,grepl("^IL", names(training))]
totrain
str(totrain)
str(training)
totrain <- data.frame(totrain, training$diagnosis)
str(totrain)
str(totrain[,-13])
preProc <- preProcess(totrain[,-33], method = "pca", pcaComp = 11)
preProc <- preProcess(totrain[,-13], method = "pca", pcaComp = 11)
trainPC <‐ predict(preProc,totrain[,-13]
trainPC <‐ predict(preProc,totrain[,-13])
trainPC <- predict(preProc, totrain[,-13])
?preProcess
preProc <- preProcess(totrain[,-13], method = "pca", thresh = 0.9)
summary(preProc)
preProc
str(totrain)
?predict
fit1 <- train(training.diagnosis~., data = totrain, method = "glm")
set.seed(3433)
fit1 <- train(totrain$training.diagnosis ~., data = totrain, method = "glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
set.seed(3433)
fit1 <- train(totrain$training.diagnosis ~., data = totrain, method = "glm")
library(caret)
set.seed(3433)
fit1 <- train(totrain$training.diagnosis ~., data = totrain, method = "glm")
fit1
pred1 <- predict(fit1, newdata = testing)
confusionMatrix(pred1, testing$diagnosis)
preProc <- preProcess(totrain[,-13],method = "pca", thresh = 0.8)
trainPC <- train(preProc, totrain[,-13])
trainPC
modelFit <‐ train(totrain$training.diagnosis ~ .,method="glm",data=trainPC)
fit2 <- train(totrain$training.diagnosis ~., method = "glm", data = trainPC)
str(testing)
testPC <- predict(preProc, testing[,-1])
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
pred2 <- predict(fit2, testPC)
testPC
summary(fit2)
trainPC
str(trainPC)
str(totrain)
preProc <- preProcess(totrain[,-13], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, totrain[,-13])
fit2 <- train(totrain$training.diagnosis~., data <- trainPC, method = "glm")
str(trainPC)
testPC <- predict(preProc, testing[,-1])
str(testPC)
pred2 <- predict(fit2, testPC)
confusionMatrix(testing$diagnosis, pred2)
O <- c(0, 1, 2, 3, 4, 5, 6)
obsCount <- c(5, 11, 13, 7, 2, 1, 1)
?pbinom
pbinom(6, 7, 0.4)
dbinom(O, 7, 0.4)
O
obsCount
n <- sum(obsCount)
n
dbinom(O, 6, 0.4)
expCount <- n*dbinom(O, 6, 0.4)
expCount
G <- 2*sum(obsCount*log(obsCount/expCount))
G
X2 <- sum(((obsCount-expCount)^2)/expCount)
X2
?pchisq
1-pchisq(G,6)
?pbinom
qbinom(0.05, 12, 0.5)
pbinom(3, 12, 0.5)
?qnbinom
qnbinom(0.05, 12, 0.5)
pnbinom(5, 12, 0.5)
pnbinom(4, 12, 0.5)
qnbinom(0.95, 12, 0.5)
qnbinom(0.95, 12, 0.5)+1
qnbinom(0.95, 3, 0.5)+1
1-pnbinom(9,3,0.5)
1-pnbinom(8,3,0.5)
x <- c(1.76, -2.28, -0.56, 1.46, 0.59, 1.26,
-1.94, -0.79, -0.86, -1.41, 2.07, 1.30)
c
x
sim(x)
dim(x)
length(x)
sd(x)
11/var(x)
var(x)
11*var(x)
?pchisq
1-pchisq(11*var(x), 12-1)
remove(list=ls())
k <- 1:9
k
pk <- c(0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046)
O <- c(7, 13, 12, 9, 9, 13, 11, 10, 16)
n <- sum(O)
n
E <- pk*n
E
G <- 2*sum(O*log(O/E))
G
X2 <- sum(((O-E)^2)/E)
X2
?pchisq
1-pchisq(G, 8)
remove(list=ls())
?var.test
x <- c(-0.802, 0.457, 0.972, 0.044, 0.318, -1.380, 0.111,
-0.023, -0.700, -1.977, -0.497, 1.471, -1.314, -0.078,
-0.505, 0.583, 1.363, -1.863, -2.105, 0.488)
y <- c(9.019, 9.852, 7.947, 9.465, 10.060, 10.508, 9.506,
9.540, 10.218, 9.407, 11.455, 11.422, 7.698, 9.972,
10.928, 11.577, 10.376, 8.605, 9.347, 10.715)
var.test(x, y)
var.test(x, y)$p.value
F <- var(x)/var()
F <- var(x)/var(y)
F
?pf
1*pf(F, 19, 19)
2*pf(F, 19, 19)
remove(list=ls())
m <- c(1.32, 1.26, 1.53, 1.39)
v <- c(0.56, 0.80, 0.93, 0.82)
var(m)
mean(v)
351*var(m)/mean(v)
F <- 351*var(m)/mean(v)
1 - pf(F, 4-1, 4*(351-1))
m
v
?var
((350*0.93 + 350*0.56)/(351 + 351 - 2))*(1/351 + 1/351)
sp <- sqrt(((350*0.93 + 350*0.56)/(351 + 351 - 2))*(1/351 + 1/351))
sp
t <- (1,53 - 1.32)/sp
t <- (1.53 - 1.32)/sp
t
?ttest
?t.test
?pt
1 - pt(t, 351 + 351 - 2)
sp <- sqrt(((350*0.93 + 350*0.80)/(351 + 351 - 2))*(1/351 + 1/351))
sp^2
t <- (1.53 - 1.26)/sp
t
1 - pt(t, 351 + 351 - 2)
sp <- sqrt(((350*0.93 + 350*0.82)/(351 + 351 - 2))*(1/351 + 1/351))
sp^2
t <- (1.53 - 1.39)/sp
t
1 - pt(t, 351 + 351 - 2)
setwd("~/Desktop/Pre_Data_Science_Study/DataScience_and_ML/coursera_practical_machine_learning/CourseraPracticalMachineLearning_project")
getwd()
train_raw <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train_raw <- read.csv("pml-training.csv")
test_raw <- read.csv("pml-testing.csv")
View(test)
View(test)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
?sapply
?tapply
?sapply
na_count <-sapply(train_raw, function(y) sum(length(which(is.na(y)))))
na_count
data.frame(na_count)
na_count <-sapply(train_raw, function(y) sum(is.na(y)))
na_count
summary(train_raw)
length(train_raw$user_name)
source('~/.active-rstudio-document', echo=TRUE)
na_percent
table(na_percent)
93+67
names(na_percent > 0.97)
na_percent
na_percent <- data.frame(sapply(train_raw, function(x) sum(is.na(x))/length(x)))
table(na_percent)
names(na_percent)
names(na_percent > 0.97)
na_percent <- sapply(train_raw, function(x) sum(is.na(x))/length(x))
table(na_percent)
na_percent
class(na_percent)
str(na_percent)
na_percent(na_percent < 0.97)
na_percent[na_percent < 0.97]
length(na_percent[na_percent < 0.97])
train <- train_raw[ ,(na_percent < 0.97)]
train
str(train)
train <- train[ , -c(1:7)]
dim(train)
str(train)
test <- test_raw[ ,(na_percent < 0.97)]
test <- test[, -c(1:7)]
str(test)
plot(train)
pairs(train)
str(train)
belt_vars <- grep(".belt.", train)
belt_vars
belt_vars <- grep("(.belt.)", train)
belt_vars
names(train)
belt_vars <- grep("(.belt.)", names(train)
)
belt_vars
names(train[, belt_vars])
belt_vars <- grep("(.belt.*)", names(train)
)
belt_vars
names(train[, belt_vars])
str(train)
pairs(train[, c(belt_vars, 86)])
pairs(train[, c(1:5, 86)])
remove(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
str(train)
pairs(train[, c(1:3,86)])
pairs(train[, c(4:6,86)])
table(train$classe)
library(caret)
inTrain <- createDataPartition(train$classe, p = 0.6, list = FALSE)
training <- train[inTrain, ]
validation <- train[-inTrain, ]
dim(training); dim(validation)
?train
?train
library(parallel)
source('~/.active-rstudio-document', echo=TRUE)
str(trainig)
str(training)
set.seed(364)
blah <- training[1:500, 1:10]
#model1 <- train(classe ~ ., method = "rpart", data = training, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
#model1$finalModel
blah
str(blah)
set.seed(364)
blah <- training[1:500, 1:10]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
model1$finalModel
set.seed(364)
blah <- training[1:500, c(1:10,86)]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
model1$finalModel
set.seed(364)
blah <- training[1:5000, c(1:10,86)]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
model1$finalModel
set.seed(364)
blah <- training[, c(1:10,86)]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
table(training)
table(training$classe)
training$classe
table(training$classe)
3348+2279
3348+2279+2054
3348+2279+2054+1930
set.seed(364)
blah <- training[c(1:100, 3349:3449, 5628:5728, 7682:7782, 9612:9712), c(1:10,86)]
#model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
#model1$finalModel
blah
str(blah)
set.seed(364)
blah <- training[c(1:100, 3349:3449, 5628:5728, 7682:7782, 9612:9712), c(1:10,86)]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
model1$finalModel
set.seed(364)
blah <- training[c(1:100, 3349:3449, 5628:5728, 7682:7782, 9612:9712), c(1:10,86)]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = FALSE))
model1$finalModel
set.seed(364)
blah <- training[c(1:100, 3349:3449, 5628:5728, 7682:7782, 9612:9712), c(1:10,86)]
model1 <- train(classe ~ ., method = "rpart", data = blah, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
model1$finalModel
blahv <- validation[c(1:100, 3349:3449, 5628:5728, 7682:7782, 9612:9712), c(1:10,86)]
foo <- predict(model1, validation)
confusionMatrix(foo, validation$classe)
